import networkx as nx
# Marco Inda
#  La función Disjkstra: Toma como Valores el Objeto Grafo, y Nodos ( inicial y final ) , camino corto a encontrar.
#  este algoritmo hace uso de la libreria de grafos de Py.
#  una función que es importante es la "to_dict_of_lists" , me da la relación entre nodo y Vecinos
#       en grafo de la forma : { 0: [1,2 ], 1:[0,3,5 ]... osea dado un nodo .. su vecinos.
#
#
#
def dijsktra( Grafo, Nodos):

    grafo = nx.to_dict_of_lists(Grafo)

    S=[]; Queue = [];anterior = [0 for i in range(max(grafo)+1)]
    # Queue ; Vector de nodos para ir cliclando
    # anteior ( sería como Precedente .. el contenido de cada subindice , contiene el mejor precedente para ese nodo )
    # S vector para ciclar el resultado.
    distancia = [0 for i in range(max(grafo)+1)]

    for nodo in grafo:
        distancia[nodo] = 1000
        Queue.append(nodo)

    distancia[Nodos[0]]=0

    while not len(Queue)==0:
        distancia_minima = 1000
        for nodo in Queue:

            if distancia[nodo] < distancia_minima :
                distancia_minima =distancia[nodo]
                nodo_temporal = nodo

        nodo_distancia_minima = nodo_temporal
        Queue.remove(nodo_distancia_minima)

        for vecino in grafo[nodo_distancia_minima]:

            if distancia[nodo_distancia_minima]==1000:
                distancia_temporal = 0
            else:
                distancia_temporal = distancia[nodo_distancia_minima]
            distancia_con_peso = distancia_temporal + Grafo[nodo_distancia_minima][vecino]['peso']

            if distancia_con_peso < distancia[vecino]:
                distancia[vecino]=distancia_con_peso
                anterior[vecino] = nodo_distancia_minima


        if nodo_distancia_minima == Nodos[1]:
            if anterior[nodo_distancia_minima]!= 0 or nodo_distancia_minima== Nodos[0]:
                while nodo_distancia_minima != 0:
                    S.insert(0, nodo_distancia_minima)
                    nodo_distancia_minima = anterior[nodo_distancia_minima]
                return S

G = nx.Graph()
# Ejemplo del ejercicio.
aristas  = [(0,1),(0,2),(1,3),(1,5),(2,4),(3,5),(4,5)]
pesos = [2,2,2,5,2,1,2]
G.add_edges_from(aristas)
#print (G)
for i, arista in enumerate(aristas):
    G[arista[0]][arista[1]]['peso'] = pesos[i]

print("La secuencia de nodos es : " , dijsktra(G,(0,5)))
